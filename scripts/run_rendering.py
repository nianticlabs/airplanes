"""
Render planes for train/val/test images.
Usage:
train split:
>>> python -m scripts.run_rendering render-train-split --scannet /mnt/scannet --planar-meshes /mnt/scannet-planes-meshes

val split:
>>> python -m scripts.run_rendering render-val-split --scannet /mnt/scannet --planar-meshes /mnt/scannet-planes-meshes

test split:
>>> python -m scripts.run_rendering render-test-split --scannet /mnt/scannet --planar-meshes /mnt/scannet-planes-meshes 
"""
import subprocess
import click
from pathlib import Path
from loguru import logger


@click.group()
def run():
    pass


@run.command()
@click.option("--scannet", type=Path, help="Path to ScanNetv2", required=True)
@click.option(
    "--planar-meshes",
    type=Path,
    help="Path to root folder generated by PlaneRCNN",
    required=True,
)
@click.option(
    "--output-dir",
    type=Path,
    help="where to store outputs",
    default=Path("/mnt/scannet-planes-renders"),
)
def render_train_split(scannet: Path, planar_meshes: Path, output_dir: Path):
    logger.info("Rendering planes for training split")
    subprocess.run(
        [
            "python",
            "-m",
            "airplanes.data_preparation.rendering",
            "--data-dir",
            str(scannet),
            "--planes-dir",
            str(planar_meshes),
            "--output-dir",
            str(output_dir),
            "--split",
            "train",
            "--tuple-info-file-locations",
            "src/airplanes/data_splits/ScanNetv2/standard_split/",
            "--mv-tuple-file-suffix",
            "_planes_eight_view_deepvmvs.txt",
            "--filename-file",
            "src/airplanes/data_splits/ScanNetv2/standard_split/scannetv2_train.txt",
            "--height",
            "192",
            "--width",
            "256",
        ]
    )


@run.command()
@click.option("--scannet", type=Path, help="Path to ScanNetv2", required=True)
@click.option(
    "--planar-meshes",
    type=Path,
    help="Path to root folder generated by PlaneRCNN",
    required=True,
)
@click.option(
    "--output-dir",
    type=Path,
    help="where to store outputs",
    default=Path("/mnt/scannet-planes-renders"),
)
def render_val_split(scannet: Path, planar_meshes: Path, output_dir: Path):
    logger.info("Rendering planes for validation split")
    subprocess.run(
        [
            "python",
            "-m",
            "airplanes.data_preparation.rendering",
            "--data-dir",
            str(scannet),
            "--planes-dir",
            str(planar_meshes),
            "--output-dir",
            str(output_dir),
            "--split",
            "val",
            "--tuple-info-file-locations",
            "src/airplanes/data_splits/ScanNetv2/standard_split/",
            "--mv-tuple-file-suffix",
            "_planes_eight_view_deepvmvs.txt",
            "--filename-file",
            "src/airplanes/data_splits/ScanNetv2/standard_split/scannetv2_val_planes.txt",
            "--height",
            "192",
            "--width",
            "256",
        ]
    )


@run.command()
@click.option("--scannet", type=Path, help="Path to ScanNetv2", required=True)
@click.option(
    "--planar-meshes",
    type=Path,
    help="Path to root folder generated by PlaneRCNN",
    required=True,
)
@click.option(
    "--output-dir",
    type=Path,
    help="where to store outputs",
    default=Path("/mnt/scannet-planes-renders"),
)
def render_test_split(scannet: Path, planar_meshes: Path, output_dir: Path):
    logger.info("Rendering planes for test split")
    subprocess.run(
        [
            "python",
            "-m",
            "airplanes.data_preparation.rendering",
            "--data-dir",
            str(scannet),
            "--planes-dir",
            str(planar_meshes),
            "--output-dir",
            str(output_dir),
            "--split",
            "test",
            "--tuple-info-file-locations",
            "src/airplanes/data_splits/ScanNetv2/standard_split/",
            "--mv-tuple-file-suffix",
            "_keyframes_dense_visibility_volumes.txt",  # we use a denser set of keyframes to compute visibility masks!
            "--filename-file",
            "src/airplanes/data_splits/ScanNetv2/standard_split/scannetv2_test_planes.txt",
            "--height",
            "192",
            "--width",
            "256",
            "--render-depth",
        ]
    )


if __name__ == "__main__":
    run()
